

---------------------------------

Hello Everyone, today I going to show the demo of Certification automation Project.
In this demo I am going to cover 
How to kick off cycle with different combination of windows and Linux cycle.
And also cover the display of logs session and later I will that this project auto kick off Orchestration , Configuration, Deployment phase from sm Machine. 

https://129.146.125.219:3000/


-------------------------------------------

Hello Everyone, Myself Vishal Sheth and I am software developer with 3.5 years of experience
in different domain like News, Retail and Cloud. I had completed my Master in Computer Science
Currently working in Appliation developer in Oracle.

My professional achivement which I mostly proud of I won a national hackathon and lead the many team
in website building or project developing.

My biggest reason is to pursue the program is to explore the international MNC in terms of learning 
skills, exposure and responsibility. I believe that pesto will give me the good and deep exposure 

I am very much consistent about this program and can give daily 5-6 hours 

I never feel like giving up I try to find myself deeply what, where is the problem and what is the root cause.
Patience is the key. It may not happen in this time it will definitely happen at right time,


--------------------------------------------

Skills Required
 Strong Java development Java 8 + mandatory. (Minimum 1.6 - 3.6 Years of experience)
 Strong experience in developing, building, testing and deploying applications/microservices developed using Java, J2EE, Spring MVC, Spring Boot and Cloud, Hibernate, Gradle, Maven, Ant.
 Strong knowledge of Spring boot and cloud components.
 Strong experience in DevOps tools and implementation of the CI/CD process.
 Strong knowledge/experience in tools like Teamcity, Jenkins, Sonarqube, Fortify, Contrast, Appdynamics, Splunk
 Experience in unix commands and shell scripting
 Model-Driven Development (MDD).
 Experience in Agile development
 Experience in XML, SOAP, REST, Microsoft SQL Server query and Stored Procedures.
 Experience with software design patterns, micro services, unit testing, performance / memory analysis, and n-tier service-oriented architecture.
 The successful candidate will be a strategic thinker who can execute tactically, be a self-starter, with the ability to multi-task, thrive in a fast-paced team environment and be able to proactively anticipate, identify, and resolve problems. 
 Excellent written, communication and interpersonal skills required.


Skills Desired 
 Knowledge in UI/UX development using Angular, HTML, CSS
 Knowledge of Identity or access management is a plus
 Sun Identity Manager or any identity management products is a plus
 Knowledge of Aveksa is a plus
 Knowledge of Mainframe is a plus
 SSIS/DTS
 Tableau/Qlikview
 DB2/Sybase 

---------------------------

Q) Longest Span with same Sum in two Binary arrays

int[] arr1 = {0, 1, 0, 1, 1, 1, 1};
int[] arr2 = {1, 1, 1, 1, 1, 0, 1};

int temp = arr1[i]-arr2[i]
prefix sum (-1 0 -1 0 0 1 0)

-1+0-1+0+0

Find in the hashmap is the already occur sum found or not

O(n)
---------------------------

Union and Intersection of two sorted arrays 

only while loop and if condition
O(m+n)

---------------------------

Q) Find the missing number
method 1) 

arr[] , int n=arr.length;
int total = (n+1)*(n+2)/2;
for(){total -= a[i]}

Method 2)
XOR1 - XOR all array elements
XOR2 - XOR all array elements from 0 to N

XOR1 ^ XOR2

----------------------------
Find the minimum distance between two numbers

arr[] = {3,5,4,2,6,5,6,6,54,8,3}
x = 3
y = 6
output = 4

Find the first presence of X or Y and store index in prev.
Than find the other X or Y respectively and store the minimum distance and update prev accordingly.
for(;i<n;i++){
    if(a[i]==x || a[i]==y){
        if(a[prev] != a[i] && (i-prev) < min_dist){
            min_Dist = i - prev;
            prev = i;
        }else{
            prev = i;
        }
    }
}
----------------------------
Leaders in the array 

arr[] = {16,17,4,3,5,2}
output : 17, 5, 2
Scan from right side
Scan all the elements from right to left in array and keep track of maximum till now.
When maximum changes it's value , print it

------------------------------
[1,2,3,1,4,1,1,1,1,1]
MAJORITY ELEMENT
A majority element in an array A[] of size n is an element that appears more 
than n/2 times (hence there is at most such elemets).

Method 1)
Using (Binary Search Tree)
At any stage, if count of a node become more than n/2 then return
class Node{
    int element;
    int count;
}

Method 2) Moore Voting Algorithm

int findCandidate(int a[], int size){
    int majIndex = 0, count =1;
    int i;
    for(i=1;i<size;i++){
        if(a[majIndex]==a[i])
            count++;
        else
            count--;
        if(count == 0){
            majIndex =i;
            count = 1;
        }        
    }
    return a[majIndex]
}

boolean isMajority(int a[], int size, int cand){
    int i, count=0;
    for(i =0;i<size;i++){
        if(a[i]==cand)
            count++;
        if(count>size/2)
            return 1;    
        else
            return 0;    
    }
}

-------------------------------

Find the Number Occurring Odd Number of Times
Used XOR
a[] = {2,3,5,4,5,2,4,3,5,2,4,4,2};
for(0 to N){
    int OddNumber ^= a[i];
}

--------------------------------
Replace every element with the greatest element on right side 
a[] = {16,17,4,3,5,2};

output:
{17,5,5,5,2,-1}

traverse from right side

-------------------------------

Q) Find a fixed point in the array
sorted in ascending order
means : a[i] == i;

a[] = {0,2,5,8,17}
USED BINARY SEARCH

-------------------------------
Q) Find a peak element 
array element is peak, if it is not smaller than its neighbors

while(low<=high){
    mid = low+(high-low)/2;
    if(mid==0 || a[mid-1]<=a[mid] && mid==n-1 || a[mid+1]<=a[mid]){
        return mid;
    }else if(mid>0 && a[mid-1] > a[mid]){
        high = mid-1    
    }else{
        low = mid+1;
    }
}

-------------------------------
Count Strictly Increasing Subarrays

a[] = {1,4,3};
output = 1 // {1,4}

a[] = {1,2,3,4};
output = 6 // {1,2}, {1,2,3}, {1,2,3,4}, {2,3},{2,3,4},{3,4}

Method1) when we want only number of subarray in output O(n)
Used the property of find the subarray of 1 to N of continous increasing order : (n-1)*n/2

for(int i=0;i<n;i++){
    if(a[i+1]>a[i]){
        len++;
    }else{
        cnt += ((len-1)*len)/2
        len = 1;
    }
}
// if last length > 1
if(len > 1){
    cnt += ((len-1)*len)/2
}

--------------------------------
Pythagorean Triplet in an array (a^2 + b^2 = c^2)

a[] = {3,1,4,6,5}
output TRUE // 3,4,5

By binary Sorting and Seaching O(n^2)

-------------------------------

Segregate 0s and 1s in an array
Method 1) Count 0's and 1's O(n) but two traversal
Method2) Using index O(one traversal)

left = 0, right = size-1
while(left<right){
    while(a[left]==0 && left < right){
        left++;
    }
    while(a[right]==1 && left<right){
        right++;
    }
    if(left<right){
        swap(a[left],a[right])
        left++;
        right--;
    }
}

-------------------------------
Given an array A[] and a number x, check for pair in A[] with sum as x 
USE SORTING AND BINARY SEARCH O(nlogn) or O(n^2)
USE HAHS MAP O(n)

------------------------------
Print missing elements that lie in range 0 â€“ 99 - O(n) time and space

a[] = {88,105,3,2,200,0,10};
output : 1,4-9,11-87,89-99

USE boolean array of 0 to 99 size 

USED BINARY SEARCH

------------------------------

Q) Implement two stacks in an array

Start both the stacks from 2 arrays of corner side
and its grow and shrink in opposite direction

--------------------------------

Find minimum difference between any two elements
given an unsorted array

i/p : 1,5,3,19,18,25
o/p : 1

i/p : 30,5,20,9
o/p : 4  // 5-9

Do sorting and iterate one by one - (time complexity O(nlogn))

---------------------------------
Find duplicates in O(n) time and O(1) extra space
the value of array element is in between the sie of the array

Use index as a reference. positive and negative approach

---------------------------------
Q) Find lost element from a duplicated arrays

a1[] = {1,4,5,7,9}
a2[] = {4,5,7,9}
output : 1

Method 1) - O(nlogn)

Start binary search in bigger array and get mid as (lo+hi)/2
if value from both the array is same then missing element in right half so lo=mid;
else hi = mid

corner case : single element and zero element

Method 2) - O(n)
Do XOR of both the array elements

-------------------------------
MoveZeroToEnd

int a[] = {1,3,0,0,4,0,9};
int cnt = 0;
int n = a.length;
for(int i=0;i<n;i++){
    if(a[i]!=0){
        a[cnt++] = a[i];
    }            
}
while(cnt<n){
    a[cnt++] = 0;
}

o/p : 1,3,4,9,0,0,0
------------------------------
Minimum Jump required

public static int jump(int nums[]){
        int a = nums[0];
        int b = nums[0];
        int jump =1;
        for(int i=0;i<nums.length;i++){
            if(i==nums.length-1){
                return jump;
            }
            a--;
            b--;
            if(nums[i]>b){
                b = nums[i];
            }
            if(a==0){
                jump++;
                a=b;
            }
        }
        return jump;
    }


--------------------------------
Remove duplicate from the array

a[] = {1,2,2,3,4,4,4,5,5};
o/p : {1,2,3,4,5}

int j=0;
for(int i=0;i<a.length;i++){
    if(a[i]!=a[i+1]){
        a[j++] = a[i];
    }
    a[j] = a[n-1];
}

-----------------------------------------

Find the element before which all the elements are smaller than it and after which all are greater

a[] = {6,2,5,4,7,9,11,8,10};
Find out preMin of rightSide and preMac of leftSide.

minRight[] {2,4,4,7,8,8,8,10,-1}
maxLeft[] {-1,6,6,6,6,7,9,11,11}

look as per index is left side min and right side max found or not.

findnumber(int a[], int n){
    int left[] = new left[n];
    left[0] = -1;
    for(int i=0;i<n;i++){
        left[i]=Math.max(left[i-1],a[i-1])
    }
    for(int i = n-1;i>=0;i--){
        if(left[i]<a[i] && right > a[i]){
            return i;
        }
        right = Math.min(right,a[i]);
    }
    return -1;
}

----------------------------------------
Overlapping rectangle :

if (l1.x == r1.x || l1.y == r1.y || l2.x == r2.x || l2.y == r2.y)
{
        // the line cannot have positive overlap
    return false;
}    
   // If one rectangle is on left side of other
if (l1.x >= r2.x || l2.x >= r1.x) {
    return false;
}

// If one rectangle is above other
if (r1.y >= l2.y || r2.y >= l1.y) {
    return false;
}

-----------------------------------------
TrianglesCount
a[] = {12,35,38,90,95,250,255};
Arrays.sort(a);
int count = 0;

for(int i=0;i<n-2;i++){
    for(int j=i+1;j<n;j++){
        int k = j+1;
        while(k<n && a[i]+a[j]>a[k]){
            k=k+1
        }
        count = count+(k-1)-j;
    }
}

---------------------------------------
Greedy Technique to find minimum number of platform
i/p 
arrival[]
departure[]

sort both the aray
i // arrival
j // departure
while(i<n && j<n){
    if(arrival[i]<departure[j]){
        platformNeeded++;
        i++;
        if(platformNeeded > maxPlatforms){
            maxPlatforms = platformNeeded;
        }
    }else{
        platformNeeded--;
        j++;
    }
}

---------------------------------------
Distribute Candy
- Each child must have at least one candy
- Higher rating will have more candies than their neighbiurs 
a[] = {1,5,2,1}

a[i-1] < a[i] // if left rating is less than increase rating by 1
a[i+1] < a[i] // if right rating is less than increase rating by 1

pre-calculate
left[] = {1,2,1,1}
right[] = {1,3,2,1}

distribute maximum candidate from both the indexs
sum = {1,3,2,1}

---------------------------------------
Spiral of the matrix :
k = 0 col
m = last col
n = 0 row
p = last row

i=k
for(j=k;j<m;j++){   sout(a[i][j]); }

j=m
for(i=n;i<p;i++) {  sout(a[i][j]);  }

i=p
for(j=m;j>k;j--) { sout(a[i][j]); }

j=k
for(i=p;i>0;i--) { sout(a[i][j]); }

k++
m--
n++
p--

------------------------------------

diagonal format

- fist half of diagonal
- second half of diagonal

Print diagonal up element a[i][j] = a[i-1][j+1]
Row <=0 or Col < MAX_COLUMN

diagonalPrint(int a[][]){
    for(k=0;k<m;k++){
        i=k;
        j=0;
        while(i>=0){
            print (a[i][j]);
            i = i-1;
            j = j+1;
        }
    }

    for(k=1;k<n;k++){
        i=m-1;
        j=k;
        while(j<=n-1){
            print (a[i][j]);
            i = i-1;
            j = j+1;
        }
    }
}

------------------------------------

Find the frequency of all element in the array
the value of element is in the range between the size of array

1-Step) Decrement by 1
2-Step) Add a[a[i]%n]= n+a[a[i]%n] 
3-Step) a[i]/n

a[] = {5,2,7,7,5,5,2}
1-step) output[] = {4,1,6,6,4,4,1}
2-step) output[] = {0,15,0,0,25,0,15}
3-step) 15/7 = 2 // count = 2

#######################

for(int i=0;i<;i++){
    a[i] = a[i]--;
}
for(int i=0;i<n;i++){
    a[a[i]%n] = a[a[i]%n] + n;
}
for(int i=0;i<n;i++){
    sout(a[i]/n);
}

-------------------------------------

Remove duplicate element using 256 size of array

--------------------------------------

In place rotate square matrix by 90 degree

void matrixRotation(int N, int matrix[][]){
    for(int i=0;i<N/2;i++){
        for(int j=i;j<N-i-1;j++){
            int temp = matrix[j][N-1-i];
            matrix[j][N-1-i] = matrix[i][j];
            matrix[i][j] = matrix[N-1-j][i];
            matrix[N-1-j][i] = matrix[N-1-i][N-1-j];
            matrix[N-1-i][N-1-j] = temp;
        }
    }
}

--------------------------------------
Binary search in matrix - row and col are sorted

start from top right element

searchElement(int a[][], int n, int value){
    int i=0;j=n-1;
    while( i<n && j>=0 ){
        if(a[i][j] == value){
            sout (i,j);
        }
        if(a[i][j] > value){
            j--;
        }else{
            i++;
        }
    }
}

------------------------------------
N people out of which is 1 is celebrity
find in minimum query who is celebrity

EASY use binary search

matrix given
matrix[][] = 
{{0,0,0,0},
{0,0,01,0},
{0,0,0,0},
{0,0,1,0}
}

X=0, Y=N
while(X<Y){
    if(matrix[X][Y]==1){
        X++;
    }else{
        Y--;
    }
}

------------------------------------
Find all subarray of Zero sum

find prefix sum
store in hash
if found then its zero sum got

Hash<Integer,ArrayList<Integer>> map = new HashMap();
    <sum key, End index of all subarray value>


------------------------------------
Find next smallest palindrome of a give number

2456 -> 2442
628798 -> 628826

1) Length of digit is even
2) Middle left digit > Middle right digit

Override middle left digit with middle right digit.
Take mirror of left half digit and override with right half digit

283849 -> 3<8 -> 284482 

1) Length of digit is even
2) Middle Left digit < middle right digit

Add 1 to middle left digit
Take mirror of left half and override with right half digit

28749 -> 7 middle -> 8>4 -> 1st approach -> 28782
23742 -> 7 middle -> 3<4 -> 7+1 now 23832

Exceptions : 
1) 28 39293 49 then check 8>4

2) 24 9 83 -> 9+1 = 10 carry 1 on 4

3) 9999 - 10001

---------------------------------------

Kadane Algorithm - ( Maximum Sub array )

---------------------------------------
kth smallest element in an array

a[] = {54,26,93,17,77,31,44,20,55}  k=2  
o/p : 20

Using Quick sort

public class Main
{
    static void swap(int a[], int i, int j){
        int temp = a[i];
        a[i] = a[j];
        a[j] = temp;
    }
    
    static int partition(int a[], int start, int end){
        int i=start;
        int pivot = a[end];
        for(int j=start;j<end;j++){
            if(a[j]<=pivot){
                swap(a,i,j);
                i++;
            }
        }
        swap(a,i,end);
        System.out.println(a[i]+" : "+i);
        return i;
    }
    static int kthSmallest(int a[],int start,int end, int k){
        if(k>0 && k < end-start+1){
            int pivotIndex = partition(a,start,end);
            if(pivotIndex-start == k-1){
                return a[pivotIndex];
            }
            if (pivotIndex-start > k-1)
                return kthSmallest(a, start, pivotIndex-1, k);
 
            // Else recur for right subarray
            return kthSmallest(a, pivotIndex+1, end, k-pivotIndex+start-1);
        }
        else{
            return Integer.MAX_VALUE;            
        }
    }
    public static void main(String[] args) {
        System.out.println("Hello World");
        int a[] = {12,3,5,7,4,19,26};
        int k = 2;
        System.out.println(kthSmallest(a,0,a.length-1,k));
    }
}

---------------------------------------

Find the distinct element in k window

using hashmap<IntegerKey, CountValue>

----------------------------------------
Find the one distinct element from the array - used XOR strategy
XOr all the elment

-----------------------------------------

Two non-repeating number in the array

a[] = 2,4,7,9,2,4

xor all elements
O/P: XOR (7^9)
now look the right second bit of element

int mostRightBit = XOR & ~(XOR-1);
int a=0,b=0;
for(int i=0;i<a.length;i++){
    int x=a[i];
    if((x & mostRightBit)!=0){
        a^=x;
    }else{
        b^=x;
    }
}

-------------------------------------
SQRT root of number without sqrt() function

using binary search
i/p: 64 

mid 32
mid 16
mid 8



------------------------------------
Find maximum 1's in the matrix .  
The matrix is sorted

O(nlogn)


---------------------------------------
Rain trapping problem :

used two array 

prefix right max

prefix left max

----------------------------------------

find the max(j-i) such that a[j]>a[i]

 a[] = 35,9,12,3,2,70,31,33,1
prefix calulcation
store index right max element : {7,7,7,7,5,7,7,8}

store index left max element : {0,1,1,3,4,4,4,8}

while(j<n && i<n){
    if(a[left[i]]<a[right[j]]){
        maxDiff = max(maxDiff, right[i]-left[j])
        j=j+1;
    }else{
        i=i+1;
    }
}

----------------------------------------
Count inversion
minimum swaps operations

i<j and A[i]>a[j]

-----------------------------------------
find the median of two sorted array (both the array are in odd length)
Divide and conquer approach
upto 2 length;


FindMedian(int first[], int start_f, int end_f, int second[], int first_s, int end_s){
    if((end_f - start_f + 1 == 2) && (end_s - start_s + 1 == 2)){
        int temp1 = Math.min(first_f,first_s);
        int temp2 = Math.max(end_f,end_s);
        return (temp1 + temp2)/2;
    }

    int median_f = median(int first[], int first_f, int end_f);
    int median_s = median(int second[], int first_s, int end_s);

    if(median_f > median_s){
        FindMedian(first[],first_f,median_f, second[], median_s,end_s);
    }else{
        FindMedian(first[],median_f,end_f second[], first_s,median_s);
    }
}

------------------------------------------
kth smallest element from two sorted array.

a1[] 2,3,6,7,9
a2[] 1,4,8,10

mid1 = 2
mid2 = 1
x1 = mid1+1 = 3
x2 = mid2+1 = 2

if(x1+x2 > k)
   if(a[mid1]>a[mid2])
        kthSmallest(start_f,mid1,start_s,end_s)
   if(a[mid1]<a[mid2])
        kthSmallest(start_f,end_f,start_s,mid2)

if(x1+x2 > k)
   if(a[mid1]>a[mid2])
        kthSmallest(start_f,mid1,start_s,end_s)
   if(a[mid1]<a[mid2])
        kthSmallest(start_f,end_f,start_s,mid2)

------------------------------------------
Design data structure that support insert,delete, search, find random number in O(1) time.

ArrayList<Integer>  HashMap<Integer,Integer>
 0-> 12                      12,0
 1-> 16                      16,1

------------------------------------------

Design a stack - push,pull,find middle and Delete middle element

array - delete is not poosible of middle element
Linked List - delete miidle element is not possible

Double linked list - we have prev reference and middle reference node.

use doubly linkedList

-------------------------------------------
Q) smallest substring in first string containing all characters of second string.
Q) Minimum sliding window

str = "ADOBECODEBANC"
ptr = "ABC"

windows size is as minimum as possible
window contains all ptr char

static String Minimum_Window(char []s, char []t)
{
 
    int m[] = new int[256];
 
    // Answer
    int ans = Integer.MAX_VALUE; // length of ans
    int start = 0; // starting index of ans
    int count = 0;
    // creating map
    for (int i = 0; i < t.length; i++) {
        if (m[t[i]] == 0)
            count++;
        m[t[i]]++;
    }
 
    // References of Window
    int i = 0;
    int j = 0;
 
    // Traversing the window
    while (j < s.length)
    {
       
        // Calculations
        m[s[j]]--;
        if (m[s[j]] == 0)
            count--;
 
        // Condition matching
        if (count == 0)
        {
            while (count == 0)
            {
               
                // Sorting ans
                if (ans > j - i + 1)
                {
                    ans = Math.min(ans, j - i + 1);
                    start = i;
                }
               
                // Sliding I
                // Calculation for removing I
                m[s[i]]++;
                if (m[s[i]] > 0)
                    count++;
 
                i++;
            }
        }
        j++;
    }

--------------------------------------------
smallest substring in first string containing distinct characters of second string.

----------------------------------------------
Q) Find longest sub-string length with K distinct characters 

public static int longestSubstringLengthWithKDistinctCharacters(String str, int k) {
    if(str == null || str.length() == 0 || k <= 0 || k > str.length()) {
      return -1;
    }
    
    int maxLength = 0;
    int start, end;
    start = end = 0;
    
    Map<Character, Integer> map = new HashMap<>();
        
    while(end < str.length()) {
      char currentChar = str.charAt(end);
      map.put(currentChar, map.getOrDefault(currentChar, 0) + 1);
      
      while(map.size() > k) {
        char charFromFront = str.charAt(start);
        map.put(charFromFront, map.get(charFromFront) - 1);
        
        if(map.get(charFromFront) == 0) {
          map.remove(charFromFront);
        }
        start++;
      }
      
      maxLength = Math.max(end - start + 1, maxLength);
      end++;
    }
    
    return maxLength;
  }

























