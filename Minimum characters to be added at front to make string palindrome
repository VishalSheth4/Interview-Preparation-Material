Input  : str = "ABC"
Output : 2
We can make above string palindrome as "CBABC"
by adding 'B' and 'C' at front.

Input  : str = "AACECAAAA";
Output : 2
We can make above string palindrome as AAAACECAAAA
by adding two A's at front of string.


----------------------------------------------------------------
Below implementation takes O(n^2).  
remove one char from last and check is palidrome or not...
the number of remove char is the number of element need to be added in front.

public class Main
{
    public static boolean ispalindrome(String s){
        int n = s.length();
        int i,j;
        for(i=0,j=n-1;i<j;i++,j--){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
        }
        return true;
    }
	public static void main(String[] args) {
		System.out.println("Hello World");
		String s = "BABABAA";
        int cnt = 0;
        int flag = 0;
 
        while (s.length() > 0) {
            if (ispalindrome(s)) {
                flag = 1;
                break;
            } else {
                cnt++;
                s = s.substring(0, s.length() - 1);
            }
        }
 
        // print the number of insertion at front
        if (flag == 1) {
            System.out.println(cnt);
        }
	}
}

---------------------------------------------------------
Complexity : O(n).
Used KMP algo - In which used the (lps) longest prefix suffix array.....

0) str = AACECAAAA
1) s = concatenate + $ + concatenation(reverse) 
2) build lps array
3) answer = normal str.length() - lps[s.length()-1]

public class Main
{
    // returns vector lps for given string str
public static int[] computeLPSArray(String str)
{
    int n = str.length();
    int lps[] = new int[n];
    int i = 1, len = 0;
    lps[0] = 0; // lps[0] is always 0
     
    while (i < n)
    {
        if (str.charAt(i) == str.charAt(len))
        {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            // This is tricky. Consider the example // AAACAAAA and i = 7. The idea is similar // to search step.
            if (len != 0)
            {
                len = lps[len - 1];
                // Also, note that we do not increment i here
            }
            else
            {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}
 
// Method returns minimum character to be added at front to make string palindrome
static int getMinCharToAddedToMakeStringPalin(String str)
{
    StringBuilder s = new StringBuilder();
    s.append(str);
     
    // Get concatenation of string, special character and reverse string
    String rev = s.reverse().toString();
    s.reverse().append("$").append(rev);
     
    System.out.println(s); 
    // Get LPS array of this concatenated string
    int lps[] = computeLPSArray(s.toString());
    for(int i=0;i<=lps.length-1;i++){
        System.out.println(s.charAt(i) +":"+ lps[i]);
        System.out.println(lps[s.length() - 1]);
    }
    return str.length() - lps[s.length() - 1];
}


	public static void main(String[] args) {
		System.out.println("Hello World");
		String str = "AACECAAAA";
        System.out.println(getMinCharToAddedToMakeStringPalin(str));
	}
}


